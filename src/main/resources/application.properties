#changing the server port
server.port=8088

#db specific properties
spring.datasource.url=jdbc:mysql://localhost:3306/allcrudoperation
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.username=root
spring.datasource.password=Imr9050@#

#ORM s/w specific properties
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true






# server.port=8088: This property sets the port on which the Spring Boot application will run. In this case, the application will run on port 8088 instead of the default port (usually 8080).

# Database Configuration:

# spring.datasource.url: This property specifies the URL to connect to the MySQL database server. It includes the protocol, host, port, and database name.
# spring.datasource.driver-class-name: This property sets the class name of the JDBC driver used to connect to the database. In this case, it's the MySQL JDBC driver.
# spring.datasource.username: This property sets the username for authenticating with the database.
# spring.datasource.password: This property sets the password for authenticating with the database.
# ORM Configuration:

# spring.jpa.hibernate.ddl-auto: This property specifies the behavior of Hibernate's schema generation. 
#The value "update" means that Hibernate will update the schema based on the entities and mappings. This is useful during development.
# spring.jpa.show-sql: This property indicates whether Hibernate should log SQL statements to the console. 
#Setting it to true will show the executed SQL statements in the console, which can be helpful for debugging.

# spring.jpa.show-sql=true      //explain 

# In a Spring Boot application, the property spring.jpa.show-sql: true is used to enable the display of SQL 
# statements in the console. When this property is set to true, Hibernate (the default JPA provider in 
# Spring Boot) will log the generated SQL statements to the console during application runtime. This can 
# be useful for debugging and understanding the SQL queries being executed by your application.